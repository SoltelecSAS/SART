/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.soltelec.procesosbanco.verificacion;

import java.awt.CardLayout;
import javax.swing.JFrame;
import org.soltelec.horiba.BancoHoriba;
import org.soltelec.procesosbanco.BancoGasolina;
import org.soltelec.procesosbanco.BancoSensors;

/**
 *
 * @author User
 */
public class PanelProcesoVerificacion extends javax.swing.JPanel {

    private PanelSeleccionMuestra panelSeleccionMuestra;
    private PanelIngresoGas panelIngresoGas;//no se usa en el caso del banco horiba
    private PanelProgresoPresion panelProgresoPresion;//el panel del manometro
    private PanelVerificacion panelVerificacion;//panel con displays
    private int contadorProceso = 0;
    private BancoGasolina banco ;    
    private int idUsuario = 1;
    private ControladorVerificacion controladorVerificacion;

    
    boolean bajaOK, altaOK;
    private static final String  MUESTRA = "MUESTRA";
    
    private static final String  INSTRUCCIONES = "INSTRUCCIONES";
     
    private static final String PRESION = "PRESION";
    
    private static final String VERIFICACION = "VERIFICACION";

    

    public PanelProcesoVerificacion(BancoGasolina banco) {
        
        this();
        this.banco = banco;
                controladorVerificacion = new ControladorVerificacion(this, (BancoSensors)banco);
        buttonSiguiente.addActionListener(controladorVerificacion);
        
    }
    /**
     * Creates new form PanelProcesoVerificacion
     */
    
    
    public PanelProcesoVerificacion() {
        initComponents();
        panelSeleccionMuestra = new PanelSeleccionMuestra();
        panelIngresoGas = new PanelIngresoGas();
        panelIngresoGas.setButtonInhabilitar(buttonSiguiente);
        panelProgresoPresion = new PanelProgresoPresion();
        panelVerificacion = new PanelVerificacion();
        this.panelContenido.add(panelSeleccionMuestra,MUESTRA );
        this.panelContenido.add(panelIngresoGas,INSTRUCCIONES);
        this.panelContenido.add(panelProgresoPresion,PRESION);
        this.panelContenido.add(panelVerificacion,VERIFICACION);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonSiguiente = new javax.swing.JButton();
        panelContenido = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.BorderLayout());

        buttonSiguiente.setText("Siguiente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(713, Short.MAX_VALUE)
                .addComponent(buttonSiguiente)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonSiguiente)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        panelContenido.setLayout(new java.awt.CardLayout());
        add(panelContenido, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSiguiente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelContenido;
    // End of variables declaration//GEN-END:variables

    public static void main(String args[]){
        
        JFrame app = new JFrame("prueba");
        app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        PanelProcesoVerificacion panelProceso = new PanelProcesoVerificacion(new BancoHoriba());
        app.getContentPane().add(panelProceso);
        app.setExtendedState(JFrame.MAXIMIZED_BOTH);
        app.setVisible(true);
    }

    
    
    
    
       
     private void abrirSolenoidesMuestraBaja(){
        
        
    }

    private void abrirSolenoidesMuestraAlta() {
        banco.encenderCalSol1(false);
        //encender el solenoide de calibracion 2
        banco.encenderCalSol2(true);
        //Encender el solenoide de aire 1 AirSol1
        banco.encenderSolenoideUno(true);
        banco.encenderSolenoide2(true);
        banco.encenderBombaMuestras(false);
        banco.encenderDrainPump(false);
    }

    
    public void pintarPanelPresion(){
        
        CardLayout card = ((CardLayout)(panelContenido.getLayout()));
        card.show(panelContenido, PRESION);
        
    }
    
    
    public void pintarPanelVerificacion(){
        
        CardLayout card =  ( CardLayout ) panelContenido.getLayout();
        card.show( panelContenido, VERIFICACION );
        
    }
    
    private void repintarPaneles() {
        CardLayout card = ((CardLayout)(panelContenido.getLayout()));
        
        switch(contadorProceso){
            
            case 0:
               card.show(panelContenido, MUESTRA);
                
                
            break;
                
            case 1:
                
                if(banco instanceof BancoSensors){
                    
                    card.show(panelContenido, PRESION);
                    
                } else if(banco instanceof BancoHoriba) {
                    panelIngresoGas.reset();
                    card.show(panelContenido, INSTRUCCIONES);
                    
                }
                
                
                
            break;
                
            case 2:
                
                card.show(panelContenido,VERIFICACION);
                
            break;    
            
            case 3:
            
            break;    
            
        }
        
        
        
        
    }//end of method repintarPaneles...






    public int getIdUsuario() {
        return idUsuario;
    }

    public void setIdUsuario(int idUsuario) {
        this.idUsuario = idUsuario;
    }

    public PanelSeleccionMuestra getPanelSeleccionMuestra() {
        return panelSeleccionMuestra;
    }

    public PanelIngresoGas getPanelIngresoGas() {
        return panelIngresoGas;
    }

    public PanelProgresoPresion getPanelProgresoPresion() {
        return panelProgresoPresion;
    }

    public PanelVerificacion getPanelVerificacion() {
        return panelVerificacion;
    }

    
    
}
